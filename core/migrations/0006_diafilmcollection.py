# Generated by Django 3.2.9 on 2021-12-21 13:44

import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks
from django.db import migrations, models

import core.blocks.content
import core.blocks.specific
import core.blocks.text


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_delete_diafilmcollection'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiafilmCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('content', wagtail.core.fields.StreamField([('heading', wagtail.core.blocks.StructBlock([('heading_text', wagtail.core.blocks.CharBlock(label='Текст', required=True)), ('size', wagtail.core.blocks.ChoiceBlock(blank=True, choices=[('', 'Размер заголовка'), ('h2', 'H2'), ('h3', 'H3'), ('h4', 'H4')], label='Размер', required=False))])), ('text', core.blocks.text.BaseRichTextBlock()), ('highlight', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.TextBlock(label='Заголовок', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст')), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('quote', 'Цитата'), ('box', 'Врезка'), ('large', 'Увеличенный'), ('small', 'Уменьшенный')], label='Тип выделения'))])), ('blockquote', wagtail.core.blocks.StructBlock([('text', core.blocks.text.PoorRichTextBlock(label='Текст')), ('attribution', wagtail.core.blocks.TextBlock(blank=True, label='Автор', required=False))])), ('image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(label='Изображения', required=True)), ('caption', wagtail.core.blocks.TextBlock(label='Подпись', required=False, rows=2)), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('figure', 'Иллюстрация'), ('banner', 'Баннер'), ('picture', 'Изображение')], label='Тип')), ('size', wagtail.core.blocks.ChoiceBlock(choices=[('small', 'Маленький'), ('medium', 'Средний'), ('large', 'Большой')], label='Размер'))])), ('gallery', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(default='Фотогалерея', label='Заголовок', required=False)), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('gallery', 'Галерея'), ('carousel', 'Карусель')], label='Тип')), ('items', wagtail.core.blocks.StreamBlock([('item', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(label='Изображение')), ('caption', core.blocks.text.PoorRichTextBlock(label='Текст'))]))], label='Изображения', required=False))])), ('collection_gallery', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False)), ('is_published', wagtail.core.blocks.BooleanBlock(default=True, label='Видимый', required=False)), ('collection_id', wagtail.core.blocks.ChoiceBlock(choices=core.blocks.content.CollectionGalleryBlock.CollectionChoices, label='Коллекция'))])), ('viewer', wagtail.core.blocks.StructBlock([('type', wagtail.core.blocks.ChoiceBlock(choices=[('youtube', 'YouTube-видео'), ('pdf', 'PDF-документ'), ('3d', '3D-плеер')], label='Содержимое')), ('url', wagtail.core.blocks.CharBlock(label='Ссылка или Youtube ID')), ('preview', wagtail.images.blocks.ImageChooserBlock(label='Превью')), ('caption', core.blocks.text.PoorRichTextBlock(label='Подпись', required=False))])), ('viewer_document', wagtail.core.blocks.StructBlock([('document', wagtail.documents.blocks.DocumentChooserBlock(label='Документ')), ('preview', wagtail.images.blocks.ImageChooserBlock(label='Превью'))])), ('announcement', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок')), ('text', core.blocks.text.PoorRichTextBlock(label='Текст')), ('page', wagtail.core.blocks.PageChooserBlock()), ('kind', wagtail.core.blocks.ChoiceBlock(choices=[('normal', 'Слева большая картинка и если есть маленькая'), ('inverted', 'Справа одна или две картинки'), ('inverted_large', 'Справа большая картинка')], label='Как выводить')), ('images', wagtail.core.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock, label='Изображения'))])), ('player', wagtail.core.blocks.StructBlock([('handle', wagtail.core.blocks.CharBlock(label='123456789/XXX')), ('kind', wagtail.core.blocks.CharBlock(choices=(('diafilm', 'Диафильм'), ('publication', 'Публикация')), default='diafilm', label='Вид плеера'))])), ('facts', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('items', wagtail.core.blocks.StreamBlock([('fact', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock(label='Название', required=True)), ('value', wagtail.core.blocks.TextBlock(label='Текст', required=True, rows=2))]))], label='Список фактов'))])), ('person', wagtail.core.blocks.StructBlock([('photo', wagtail.images.blocks.ImageChooserBlock(label='Фото')), ('fact', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('items', wagtail.core.blocks.StreamBlock([('fact', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock(label='Название', required=True)), ('value', wagtail.core.blocks.TextBlock(label='Текст', required=True, rows=2))]))], label='Список фактов'))], label='Факты'))])), ('artists', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False)), ('is_published', wagtail.core.blocks.BooleanBlock(default=True, label='Видимый', required=False)), ('roles', wagtail.core.blocks.MultipleChoiceBlock(choices=core.blocks.content.ArtistsBlock.RolesChoices, label='Роли'))])), ('diafilms', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False)), ('is_published', wagtail.core.blocks.BooleanBlock(default=True, label='Видимый', required=False))])), ('diafilm_similar', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False)), ('is_published', wagtail.core.blocks.BooleanBlock(default=True, label='Видимый', required=False))])), ('collections', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False)), ('is_published', wagtail.core.blocks.BooleanBlock(default=True, label='Видимый', required=False))])), ('quotes', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False)), ('is_published', wagtail.core.blocks.BooleanBlock(default=True, label='Видимый', required=False))])), ('concept', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок')), ('conception', core.blocks.text.PoorRichTextBlock(label='Концепция')), ('text', wagtail.core.blocks.RichTextBlock(label='Текст'))])), ('team', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок')), ('caption', wagtail.core.blocks.CharBlock(label='Подпись')), ('members', wagtail.core.blocks.StreamBlock([('member', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock(label='Имя')), ('email', wagtail.core.blocks.EmailBlock(label='Email', required=False)), ('caption', wagtail.core.blocks.CharBlock(label='Подпись')), ('photo', wagtail.images.blocks.ImageChooserBlock(label='Фотография', required=False))]))], label='Люди'))])), ('contacts', wagtail.core.blocks.StructBlock([('form_show', wagtail.core.blocks.BooleanBlock(default=True, label='Показывать форму?')), ('form_title', wagtail.core.blocks.CharBlock(default='Обратная связь', label='Заголовок формы', required=False)), ('title', wagtail.core.blocks.CharBlock(default='Контакты', label='Заголовок')), ('text', core.blocks.text.PoorRichTextBlock(label='Текст')), ('email', wagtail.core.blocks.EmailBlock(label='Почта', required=False)), ('phone', wagtail.core.blocks.CharBlock(label='Телефон', required=False))])), ('news', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False)), ('is_published', wagtail.core.blocks.BooleanBlock(default=True, label='Видимый', required=False))])), ('points', wagtail.core.blocks.StructBlock([('year_begin', wagtail.core.blocks.CharBlock(label='Начало производства')), ('year_end', wagtail.core.blocks.CharBlock(label='Конец производства')), ('manufacturer', wagtail.core.blocks.CharBlock(label='Производитель')), ('description', core.blocks.text.PoorRichTextBlock(label='Описание')), ('scheme', wagtail.core.blocks.StructBlock([('image', core.blocks.specific.BigSvgChooserBlock(label='Изображение')), ('points', wagtail.core.blocks.StreamBlock([('point', wagtail.core.blocks.StructBlock([('coords', wagtail.core.blocks.CharBlock(default='50,50', is_inline=True, label='Координаты')), ('image', wagtail.images.blocks.ImageChooserBlock(label='Изображение', required=False)), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False))]))], label='Метки'))], label='Схема'))])), ('lamp', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(label='Изображение')), ('power', wagtail.core.blocks.CharBlock(label='Мощность')), ('frame', wagtail.core.blocks.CharBlock(label='Размер кадра'))])), ('equipment_similar', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Заголовок')), ('text', core.blocks.text.PoorRichTextBlock(label='Текст', required=False)), ('number', wagtail.core.blocks.IntegerBlock(label='Количество'))]))], blank=True, null=True, verbose_name='Описание')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diafilms', to='core.collectionpage', verbose_name='Подборки')),
                ('diafilm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to='core.diafilmpage', verbose_name='Диафильм')),
            ],
            options={
                'verbose_name': 'Диафильм - Подборка',
                'verbose_name_plural': 'Диафильмы и подборки',
                'unique_together': {('diafilm', 'collection')},
            },
        ),
    ]
